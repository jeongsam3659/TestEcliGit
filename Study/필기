다형성 
 
 - 자바에서의 모든객체는 부모클래스형 참조 변수나 구현한 인터페이스 변수에 담을 수 있다.
 ex)
  - interface HelloWorld 
   sayHello();
   
  - class HelloWorldEn implments HellowWorld
  sayHello();
  
  클래스 En이 인터페이스HW을 구현시. 추상메소드를 오버라이딩해야된다. 
   > 객체의 주소값을 담는 참조변수 타입은 En 클래스타입해야되지만.
   > 자바는 상속받은 부모클래스나 인터페이스 담을 수 있습니다.
   
   HelloWorld 형 참조변수 > interface HelloWorld > class HelloWorldEn implement HellowWorld
   							sayHello();			오버라이딩	sayHello();
   							
   							
   							
   							
   							

   							
*스프링 프레임워크 
 - 초기셋팅이 다소 복잡할 수 있으므로 연습이 많이 필요함.
 - xml 이용하는방법(구) 과 자바 어노테이션을 이용한 방법 두가지로 구분.
 
 
*Maven
  - 자바 프로젝트의 빌드를 자동으로 해주는 도구
  - xml에 작성한 프로젝트 정보를 토대로 컴파일하고 라이브러리를 연결하는 등의 작업을 해주는 도구 
  - Maven서버를 통해 라이브러리를 다운받아 설정하는 작업도 수행한다.
  - 초기는 1.5로 되어있으므로 1.8버젼이상으로 수정.
  - 자바프로젝트 - 프로퍼티 - 프로젝트 fect - java 1.8
  
  
  - Maven - spring context
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.7</version>
</dependency>


 - 4.325버젼을 사용하는 곳도 있다. 5.버젼과 차이점이 있으니 주의고려.
 
	<properties>
		<!-- 자바 버젼. -->
		<java-version>1.8</java-version>
		<!-- 스프링 버젼. -->
		<org.springframework-version>5.3.7</org.springframework-version>
		<!-- 구버젼. -->
		<!-- <org.springframework-version>5.2.15.RELEASE</org.springframework-version> -->
	</properties>
	
	작성한뒤 버젼을 바꾸고 싶을 때마다 해당 태그를 불러오면된다.
	<version>${org.springframework-version}</version>

*로그 
  slf4j 와 logBack 적용.

<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
<dependency>
	<groupId>org.slf4j</groupId>
	<artifactId>slf4j-api</artifactId>
	<version>${org.slf4j-version}</version>
</dependency>
		
<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.2.3</version>
    
    <!--logback을 slf4j에서 사용할려면 scope를 지우고 exclusions넣으면된다 -->
    <exclusions>
		<exclusion>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</exclusion>
	</exclusions>
	<!--실행중에 로그를 볼수있다. -->
	<scope>runtime</scope>
</dependency>


*****
1)
- xml설정
 config 패키지를 만든뒤 beans.xml 생성.
 
 <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd">
</beans>	

그리고 Main클래스에서 해당 파일로딩.

//beans.xml 파일을 로딩한다.
ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("패키지_경로");
ctx.close();
  
 2) 인터페이스 생성 및 그걸 상속하는 클래스 생성. 
 - Helloworld 와 en
 
 -xml 파일에서 해당 클래스를 사용하고자 id와 경로 설정.
 	ex)
 	 <bean id='hello' class='kr.co.campus.beans.HelloWorldEn'>
 
 3) xml에 정의한 bean 객체의 주소값을 가져온다.
 	방법 1.	Helloworld hello1 = (Helloworld)ctx.getBean("hello");
 	방법 2.	Helloworld hello2 = ctx.getBean("hello",Helloworld.class);
 	
 	>> 'hello' id를 부여하고 해당 아이디값을 가진 클래스를  찾아간다.
 	
 	
 	


****3 -7강 ----------------------------------------------------


IOC 컨테이너 : 제어 역전
inversion of control
 일반적으로 프로그래밍을 작성할때 프로그램이 흘러가는 흐름이나 생성되는 객체에 대한 제어권을 개발자가
 만드는 개발자가 가지는 것과 달리 프레임워크가 가지는 것을 의미
 
 개발자가 코드의 흐름이나 객체 생성에 관련된 코드를 프로그래밍 코드에 직접 작성하는 것이 아닌 프레임워크가 사용하는 파일에 작성하면 
 이를 토대로 프레임워크가 객체를 생성하여 반환하고 코드가 동작하는 순서를 결정하게 된다는 의미.
 >> 개발자는 중요한 정보를 세팅하면 프레임워크가 처리해주는 방식
 >> 반복되는 코드를 일일이 만들어주기 보단 프레임워크로 처리
 
 
POJO class :
 plain Old java object
 자바 모델이나, 기능, 프레임워크 등에 따르지 않고 홀로 독립적이며 '단순한 기능'만을 가진 객체들을 의미.
 자바에서는 이러한 객체들을 Bean이라고 부른다.
 
 POPO( PHP ), POCO( 닷넷 프레임워크 ), PODS( C++ ), POD( Perl )등
 
 Metadata( 코드로 작성한 정보 )를 읽고 그정보를 토대로 POJO클래스를 통해 객체를 만들어서 사용하게끔 반환
 ex) HelloWorldEn 으로 Ko 객체로 사용.
 
 
 IOC 컨테이너 종류
 1) BeanFactory
 2) ApplicaionContext
 
 
BeanFactory
 클래스를 통해 객체를 생성하고 이를 전달한다.
 상속 등 객체간의 관계를 형성하고 관리.
 Bean에 관련된 설정을 위한 xml파일은 즉시 로딩하지만 객체는 개발자가 요구할 때 생성.
 ex) xmlBeanFactory
 
 >> 클래스를 통해 객체를 만들고 그 주소값을 반환.
 
 
ApplicationContext
 클래스를 통해 객체를 생성하고 이를 전달.
 상속 등 객체간의 관계를 형성하고 관리
 국제화 지원등 문자열에 관련된 다양한 기능을 제공.
 - 리스너로 등록되어 있는 Bean에 이벤트를 발생시킬 수 있다.
 - Bean에 관련된 설정을 위한 xml 파일은 즉시 로딩하면서 객체를 미리 생성해서 가짐.
 ex) ClassPathXmlApplicationContext , FileSystemXmlApplicationContext , XmlWebApplicationContext
 
 
 <정리>
 스프링 프레임워크는 IoC 컨테이너를 이요해 Bean객체들을 관리한다.
--- 
 패키지 내/외부 bean.xml 비교
// .getBean("id값" , 클래스명.class)
// System.out.printf("t1 : %s\n", t1); >> 로그
// ApplicationContext는 따로 설정해주지 않으면, beans.xml에 정의된 객체들이 자동으로 생성. 
 
 
 
 
****3 -8강 ----------------------------------------------------
IoC를 통해 Bean 객체 생성. 
 Spring에서는 사용할 Bean객체를 Bean Configuration file에 정의를 하고 필요할때 객체를 가져와 사용하는 방법을 이용.
 Bean 태그 : 사용할 Bean을 정의하는 태그. 
 
 기본속성
  > Class :
  		객체를 생성하기 위해 사용할 클래스를 지정.
  > id :
   		Bean 객체를 가져오기 위해 사용하는 이름을 지정.
  > lazy-init :
  		싱글톤인 경우 xml을 로딩할때 객체 생성여부를 설정.
  		 true 일경우 xml 로딩 시 객체를 생성하지 않고 객체를 가져올 때 생성.
  		.getBean시에 객체가 생성된다.
  > scope :
  		객체의 범위를 설정.
  		 singleton - 객체를 하나만 생성해서 사용. (기본값)
  		 prototype - 객체를 가져올 때 마다 객체를 생성.
 
 
 getBean으로 해당 id를 가진 주소값을 가져올 수 있다. 참조변수를 선언해놓으면 자동으로 들어오니 id를 지정할 필요없다.

ex)
 1)
 <bean id='test1' class="kr.co.campus.beans.TestBean"/>
<!-- xml을 로딩할때 자동으로 객체가 생성 -->
<!-- id 속성에 이름을 부여하면 getBean 메서드를 통해 객체의 주소값을 받아 사용할 수 있다. -->
<!-- 생성된 객체는 더이상 생성되지 않는다 . == Singleton -->

 2)
 <bean id='test2' class ='kr.co.campus.beans.TestBean' lazy-init="true"/>
<!-- lazy-init : true == xml을 로딩할때 객체가 생성되지 않는다.(생략하면 false) -->
<!-- .getBean 메서드를 호출할 때 객체가 생성되면 singleton이기 때문에 객체는 하나만 생성된다. -->
 //동일하게 주소값만 가져온다.
 
 3)
 <bean id='test3' class ='kr.co.campus.beans.TestBean' scope='prototype'/>
<!-- scope : prototype - xml을 로딩할 때 객체가 생성되지 않는다. -->
<!-- getBean 메서드를 호출할때 마다 새로운 객체를 생성해서 반환한다. -->
 // 회원정보 관리시.
 
 <정리> 
 spring에서는 프로그램에서 사용할 객체를 bean configuration 파일에 정의하여 사용.
 
 
 
****3 -9강  ----------------------------------------------------
 Bean 객체의 생명주기
  - spring의 Bean 다음과 같은 상황일 때 객체가 생성된다.
   > Singleton인 경우 xml파일을 로딩 할 때 객체가 생성된다.
   > Singleton이고 Lazy-init 속성이 true일 경우 getBean메서드를 사용할 때 객체가 생성된다.
   > prototype 일 경우 getBean 메서드를 사용할 때 객체가 생성된다.
   
  - spring의 Bean 다음과 같은 상황일 때 객체가 소멸된다.
   > IoC 컨테이너가 종료 때 객체가 소멸.
 
****3 -10강  ----------------------------------------------------
1)  
객체 생성과 소멸시 호출될 메서드 등록
 - 객체가 생성되면 가장 먼저 생성자가 호출된다.
 >init-method 
 	생성자 호출 이후 자동으로 호출된다.
 	ex) init-method='메서드 이름(bean1_init)'
 >destory-method
 	객체가 소멸될 때 자동으로 호출된다.
 
 2)	
 윗 두개가 설정되지 않을시.	
 >default-init-method
  	init-method를 설정하지 않은 경우 자동으로 호출.
 >default-destory-method 
 	destory-method를 설정하지 않은 경우 자동으로 호출.
 	
<bean>으로 따로 설정해주는게 아니라 beans에 이어서 설정해준다


> 둘다 설정되어있을경우 1)으로 실행된다. 
> default 메서드들이 구현되어있지 않은 클래스면 생성자만 생성되고 나머지는 무시되지만
  직접설정한 메서드가 없을경우 오류가 난다.
 
 
 
****3 -11강  ---------------------------------------------------- 
BeanPostProcessor
 
 -Bean객체를 정의할 때 init-method속성을 설정하면 객체가 생성될 때 자동으로 호출될 메서드를 지정할 수 있다.
 -이 때 BeanPostProcessor 인터페이스를 구현한 클래스를 정의하면 
   Bean객체를 생성할 때 호출될 init 메서드 호출을 가로채 다른 메서드를 호출 수 있도록 할 수 있다.
   
//로그인 확인 / 관리자 확인  (중간에 가로채는 용도) 

 - postProcessBeforeInitailzation
	>init-method에 지정된 메서드가 호출되기 전에 호출된다.
 - postProcessAfterInitailzation
	>init-method에 지정된 메서드가 호출된 후에 호출된다.
	
 - init-method가 지정되어 있지 않더라도 자동으로 호출된다.	

 
 
 implements BeanPostProcessor
  > 인터페이스가 따로 생성하는게 아니라 기존 자바 인터페이스
 
 
 > id = t1 실행 > init-method 호출도기전에  postProcessBefore 먼저 호출되어 bean 주소값을 받는다.
 > bean.xml에는 따로 적어두면 된다.
    <bean class='kr.co.campus.processor.TestBeanPostProcessor'/>
 > init-method를 적어두지 않아도 실행된다.
 
 
- bean객체별도 작업을 실행시.
 beanName을 활용하면된다. 
  ex)
  switch(beanName) {
		case "t1" :
			System.out.println("id가 t1인 bean객체 생성. ");
			break;
		case "t2" :
			System.out.println("id가 t2인 bean객체 생성. ");
			break;
		}
		return bean;
 
 <정리>
 Spring에서는 객체가 생성될때 init-method로 지정된 메서드가 호출되기 전, 후 에 다른 메서드를 호출할 수 있도록 지원하고있다.
 
 
 
 
 ****3 -12강  ---------------------------------------------------- 

** 
의존성 주입 Dependency Injection
 > 의존성 주입은 Spring에서 중요한 개념, 장점.
 > Bean객체를 생성할 때 Bean객체가 관리할 값이나 객체를 주입하는 것을 의미한다.
 
 > Bean객체 생성 후 Bean객체가 가질 기본갓을 자바 코도로 설정하는 것이 아닌 Bean을 정의하는 xml코드에 정의하는 개념.
 == 초기값을 가지게하고 싶을때 xml에 지정해놓으면 Bean객체가 생성될때 초기값을 설정해주는 것.
 
 생성자를 통한 주입.
 > Bean을 정의할 때 constructor-arg태그를 이용해 주입하게 되면 생성자를 통해 주입.
 
 
ex)
//생성자 
 public TestBean(int data1, double data2, String data3) {
		System.out.println("TestBean의 생성자 : int double String");
		this.data1 = data1;
		this.data2 = data2;
		this.data3 = data3;
	}
	
//beans.xml
 <bean id='obj5' class='kr.co.campus.beans.TestBean' lazy-init='true'>
		<constructor-arg value='200' type='int'/>
		<constructor-arg value='22.22' type='double'/>
		<constructor-arg value='안녕하세요..' type='java.lang.String'/>
</bean>

main
TestBean obj5 = ctx.getBean("obj5", TestBean.class);
obj5.printData();

 >>// 문자열 -- double -- 정수 순으로 우선순위를 둔다.
 >>// 순서가 어긋나도 값 해당에 맞는 값을 넣는다. 기왕이면 정해진 순서대로 값을 넣는방식.
 
		<constructor-arg value='ㅎㅇㅎㅇ ㅎㅎ' type='java.lang.String' index='2'/>
		<constructor-arg value='441' type='int' index='0'/>
		<constructor-arg value='44.44' type='double' index='1'/>
 >>// index를 부여해서 넣는 방법도 있다.
 
 
 
 
 
 
 - 객체를 넣는 방법.
class1
public class DataBean {
	
}
class2
public class TestBean2 {
	private DataBean data1;
	private DataBean data2;
	
	public TestBean2(DataBean data1, DataBean data2) {
		this.data1 = data1;
		this.data2 = data2;

	}
	
	public void printData() {
		System.out.printf("data1 : %s\n",data1);
		System.out.printf("data2 : %s\n",data2);
	}
}




bean.xml
 <bean id='obj8' class='kr.co.campus.beans.TestBean2' lazy-init='true'>
		<constructor-arg>
			<bean class='kr.co.campus.beans.DataBean'></bean>
			<!-- 여기서 생성된 bean은 첫번째 매개변수  -->
		</constructor-arg>
		<constructor-arg>
			<bean class='kr.co.campus.beans.DataBean'></bean>
			<!-- 여기서 생성된 bean은 두번째 매개변수  -->
		</constructor-arg>
 </bean>
 
 - 이미 있는 객체를 넣는 방법.
	<bean id='data_bean' class='kr.co.campus.beans.DataBean' scope='prototype'/>
	
	<bean id='obj9' class='kr.co.campus.beans.TestBean2'>
		<constructor-arg ref='data_bean'/>
			<!-- 여기서 생성된 bean은 첫번째 매개변수  -->
		<constructor-arg ref='data_bean'/>
			<!-- 여기서 생성된 bean은 두번째 매개변수  -->
	</bean>

 
 <정리>
 bean 객체를 생성할때 객체의 기본값을 생성자를 통해 주입,.
 
 
 
  ****3 -12강  ---------------------------------------------------- 
 
Setter 메서드를 통한 주입.
 
 -Bean을 정의할 때 Bean객체가 가지고 있을 기본값을 생성자가 아닌 Setter메서드를 통해 주입할 수 있다.
 
 - 주입 원리
  > <property name="data1" value="100"/>
      				//1)			//2)
      				 
      				//1)			//2)
      	public void setData1( int data1 ){
      		this.data1 = data1;
      	}
      	
  > property 'name'은 해당 set을 찾아서 호출하게됩니다.
  > value 속성일경우 매개변수로 들어간다.
  > type을 설정해주는게 좋다.
      
 
  ****3 -13강  ---------------------------------------------------- 
 
컬렉션 주입
 - Bean을 정의할 때 주입해야 하는 맴버가 컬렉션인 경우 컬렉션이 관리할 객체를 초기에 설정할 수 있다.
  - List , Map , Set , Property
 
 
 * java에서는 기본자료형 값은 컬렉션에 넣지 못한다. >> 래퍼 클래스로 처리해야함. 
 * 에매할경우 value에 타입을 설정하면된다. (문자열을 제외한 나머지는 설정하는것이 좋다)
 	ex) <value type="int">100</value>
 	
 	<property name="List2">
			<list>
				<value type="int">100</value>
				<value>99</value>
				<value>111</value>
				<value>919</value>
			</list>
	</property>
 
 * Set
 * <set><ref>는 하나만 출력된걸 확인할수있다. bean_id값이 같은걸 주입할 수 없겠금 되어있다.
  - set은 중복되는걸 들어갈 수 없다.
  ex)
  <property name="set1">
			<set>
				<value>문자열2</value>
				<value>문자열4</value>
				<value>문자열6</value>
			</set>
	</property>
  
 * Map
  -타입에 관계없이 매개채 하나 하나의 정보를 저장하는거 , ex) 학생의 정보
 ex)
 <property name="map1">
			<map>
				<entry key="a1" value="문자열44"/>
				<entry key='a2' value="999" value-type='int'/>
				<entry key='a3'>
					<bean class='kr.co.campus.bean.DataBean'/>
				</entry>
				<entry key='a4' value-ref='data_bean'/>
				<entry key='a5'>
					<list>
						<value>문자열열11</value>
						<value>문자열열12</value>
						<value>문자열열21</value>
					</list>
				</entry>
			</map>
	</property>
 
 * Property
  -문자열값만 저장해서 사용. 
  ex)
  <property name="prop1">
			<props>
				<prop key="p1">문자열1 저장</prop>
				<prop key="p2">문자2 저장</prop>
				<prop key="p3">문자열3 저장</prop>
				<prop key="p4">문자4 저장</prop>
			</props>
	</property>
  
  
  <정리>
  bean객체를 생성할 때 주입할 맴버가 컬렉션라면 컬렉션이 관리할 객체를 주입할 수 있다.
 
 
 
 
  ****3 -14강  ---------------------------------------------------- 
 자동 주입
 - Bean을 정의할 때 주입할 객체는 생성자를 통한 주입이나 Setter를 통한 주입을 사용했다.
 - Spring에서는 객체를 주입할 때 자동으로 주입될 수 있도록 설정.
 - 자동주입은  이름, 타입, 생성자를 통할 수 있으면 auto wire라고 용어로 부른다.
 
 *이름
  byName - 빈 객체의 프로퍼티 이름과 정의된 빈의 이름이 같은것을 찾아 자동으로 주입한다.
  ex)
   <bean id =*"data1" ...> 과 private DataClass1 *data1;
   
  
 *타입
  byType - 빈 객체의 프로퍼티 타입과 정의된 빈의 타입이 일치할 경우 주입
  		   이때, 동일 타입의 빈이 두 개이상 정의되어 있으면 오류가 발생한다.
  ex)	 타입을 가지고 주소값 부여.
   <bean id ='data3' class=*"kr...."/> 과 private *DataClass *obj1;
 
 
 *생성자
  constructor : 생성자의 매개변수 타입과 정의된 빈의 타입이 일치할 경우 주입.
  				이때, 동일 타입의 빈이 두 개 이상 정의되어 있으면 오류가 발생한다.
  ex) 
   <bean id ='data30' class='kr...'/> public TestBean3(DataClass data30 ...){}
  
  
  ?자동주입일때는 정수값이나 문자열을 넣을 수 없다.
  
  *자동주입.
  	<bean 맨 위>
  	default-autowire="byName"
  
  *자동주입을 원하지 않을 경우.
   autowire='no'
   
   
  ****3 -15강  ---------------------------------------------------- 
Java코드를 활용한 Bean 등록
  - 현재까지 beans.xml파일을 만들어 이를 통해 빈 객체를 생성하고 java 코드에서 가져와서 사용.
  - beans.xml파일에 등록했던 내용을 java 파일에서 작업하는 방법.
  - xml과 java파일의 차이는 
  	xml은 값을 정해줘야 한다.
  	java파일은 코드를 자유롭게 작성.
  	
  * @Configuration
   - beans.xml 역할을 한다.
  
AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(BeanConfigClass.class);
  	
ctx.register(BeanConfigClass.class);
ctx.refresh();

 * @Bean
  - @Bean 어노테이션은 bean 객체를 정의할 때 사용.
  - 메서드의 이름이 bean의 이름이된다.
  -- @Bean(name= 이름) : bean의 이름을 새롭게 정의.
     	설정되어있지 않을경우 메소드의 이름이 name으로 설정됨.
     	해당 이 없을경우 오류
     	ex) @Bean( name = "java600")
     	
  -- @Lazy : lazy-init 속성을 지정.
  		getbean시에 객체 생성.
  
  -- @Scope : bean의 scope를 설정.
  		
  -- @Primary : primary 속성을 지정.
  		똑같은 클래스타입을 2개이상일경우 에러가 난다.
  		구별하기위한 우선순위장치
  		
 >> AnnotationConfigApplicationContext에서 해당 bean파일 호출
 >> @Configuration >> @Beand을 찾아서 대상 return값을 받는다.
  
  
   ****3 -16강  ---------------------------------------------------- 
 init, destroy 메서드
  - java코드로 init와 destroy 메서드 설정.
  
  - init 메서드
  	> 생성자가 생성되면 init메서드가 호출된다.
  ex)
  @Bean(initMethod ='bean2_init', destroyMethod = "bean_destory")
  
  
  
  ****3 -17강  ---------------------------------------------------- 
  주입
   - Bean에 대한 주입은 생성자를 직접 호출하거나 setter메서드를 직업 호출하여 값을 주입.
   
  자동주입
   - @Bean(autowire = 주입방식 ): 자동 주입 방식을 설정한다.
   - Autowire.By_Name : 이름을 통한 자동주입
   - Autowire.By_Type : 타입을 통한 자동 주입
  		**스프링 5.1부터 Deprecated 되었다. 5.1부터는 Bean 직접 설정하는 방식을 추천.
  
  xml		
  생성자를 통한  주입은	
  		<constructor-arg ></constructor-arg>
  		
  java		
 	@Bean
	public TestBean1 java1() {
		-  호출내용 --
		
		return new TestBean1(200, "java 문자열 2 호출", new DataBean1());
	} 
	
	
setter getter로 주입.
 ex)
 @Bean
	public TestBean1 java2() {
		TestBean1 t1 = new TestBean1();
		t1.setData1(400);
		t1.setData2("setData문자열");
		t1.setData3(new DataBean1());
		
		return t1;
		
		
	자동주입 
	xml		
  	<bean id='xml3' class='kr.co.campus.beans.TestBean2' lazy-init='true' autowire='byName'/>
	<bean id='data1' class='kr.co.campus.beans.DataBean2'/>
	<bean id='data2' class='kr.co.campus.beans.DataBean2'/>	
		>> 객체의 주소값을 넣은걸 확인할 수 있다.
		
	java
		@Bean(autowire = Autowire.BY_NAME)
			public TestBean2 java3() {
			return new TestBean2();
		}
		
		@Bean(autowire = Autowire.BY_TYPE)
			public TestBean3 java4() {
			return new TestBean3();
		}
	
   ****3 -18강  ---------------------------------------------------- 
Annotation 어노테이션을 이용한 빈 설정.
 - Spring 2.5 버젼부터 xml 통한 빈 설정 방법 외에 어노테이션을 이용한 빈 설정 방법 제공.
 - 빈 설정 파일에 다음과 같은 코들ㄹ 추가하면 빈에 대한 설정을 xml파일이 아닌 빈 클래스의 어노테이션을 검색해 반영하게된다.
 
 <context:anotation-config> 
ex)
추가
	xmlns:context="http://www.springframework.org/schema/beans"
추가
	schemaLocation
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
++
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd	
	
	
 @Required
  - 5.0버전이하 xml용
  - 반드시 주입해야 할 프로퍼티로 설정한다.
  ex)
   @Required
   public void setData1(int data1){
   		this.data1 = data1;
   }
   
  현재는 set에서 사용하지않고  생성자를 통해 주입 받으면서 진행한다.
  
  
 
 @Autowired
  - 객체 타입을 통해 bean객체를 자동으로 주입.
  - setter 상관이 getter 변수에도 설정이 가능하다. >> setter가 없어도 진행가능하게 해준다.
  
  
  @Qualifier
  - @Autowired로 주입 시 같은 타입의 Bean이 여러 개 정의되어있다면
   qualifier에 설정되어 있는 bean을 주입.
  ex) 
   	@Autowired
   	@Qualifier("ID 값.")
   		private 생성자
   		
  //Getter만 추가하기.
   
   
   생성자 주입
   - 생성자에 주입 시 참조변수 타입 변수들은 자동으로 주입되고 기본 자료형 및 문자열 값만 주입을 설정해주면 된다.
  ex)
  public TestBean2(@Value("100")int data1, @Value("문자열")String data2, DataBean data3){
  	this.data1 = data1;
  	this.data2 = data2;
  	this.data3 = data3;
  } 
  
  
  <context:annotation-config/>
  bean.xml에서 해당 문구로 인해. 생성된 타입과 일치한 bean을 찾아가는게 자동주입 annotation
  ex)
  TestBean2 java2 = atx.getBean("java2", TestBean2.class);
  								>> BeanConfigClass의 메소드 값. 
  								
  ** beanconfig으로는 자동으로 주입되지않고 null값이 된다.
   
 
   
   ****3 -19강  ----------------------------------------------------    
JSR-250 어노테이션
	- 스프링에서 기본으로 제공되지는 않지만 자바 플랫폼 공통 어노테이션인 JSR-250을 적용할 수 잇다.
	- 적용을 위해서는 반드시 라이브러리를 추가해야한다.
   
   BeanconfigClass에서 설정하지 않고 
   Bean에 직접 적용.
   
   @postConstruct
   - 생성자 호출 후 자동으로 호출될 함수를 등록.
   - xml init 메서드
   
   @PreDestroy
   - 객체가 소멸되기 이전에 자동으로 호출.
   - xml destory 메서드
   
		 ex)
		@PostConstruct
		 public void postconstruct(){
		 	""
		}
   TestBean1, TestBean2
   
   @ 
   - Bean의 이름을 통해 주입.
   		ex)
   		@Resource(name = 'obj3')
   		private DataClass5 data9
   //getter만
   
   
   - 변수의 이름과 Bean의 이름이 다를 경우 
   	// (name="이름")이라는 이름을 찾아 객체에 주입
   
   Testbean3,4,5
   
   
   
   
    ****3 -20강  ----------------------------------------------------     
 Component 컴포넌트
 	- @Component 어노테이션을 사용하면 BeanConfiguration 파일에 Bean을 등록하지 안하도 자동 등록
 	
 	- Xml을 이용하는 방식
 	 ex)
 	 <context:component-scan base-package='kr.co.campus.beans'/>
 	- BeanConfigurationClass 사용
 	 ex)
 	 @ComponentScan(basePackages = {"kr.co.campus.beans",""}
 	 @ComponentScan(basePackages = "kr.co.campus.beans2")

	으로 설정하면 해당 클래스를 따로 빈을 설정하지고 않고 가져올수 있다.
	
	@Component("")
	를 두개 공통으로 사용할수 없다. 1:1
	다중을 이용하고싶으면 beanconfig파일에서 작업을 해야한다.
	ex)
	<bean id='xml400' class='kr.co.campus.beans2.TestBean4'/>
	<bean id='xml401' class='kr.co.campus.beans2.TestBean4'/>
	
	
	- IOC 컨테이너 객체를 생성할 때 자동으로 객체가 생성
	- 타임룰 통해 등록된 Bean객체를 가져올수있다.
	- Singleton
	
	
	
	
	
   
   
   
   정리
  @Bean 
   개발자가 class의 코드를 수정할 수 없는 경우
   같은 클래스 타입의 Bean을 여러개 등록할 경우 
   
  @Component
  개발자가 class의 수정할 수 있는 경우
  @lazy 
  @scope("prototype")
  사용
   
 
   ****3 -22강  ----------------------------------------------------  
Component 자동주입
	@Bean을 통해 설정했던 주입과 동일한 방식을 이용.
	@Autowired 타입을 통한 자동 주입
	@Qualifier 이름을 통한 자동 주입
	- 생성자의 경우 타입이 같은 Bean을 찾아 자동으로 주입한다.
   
    > @Component를 붙이는 순간 Bean객체로 자동으로 등록된다.
   
   
   >Beanconfigclass에서 
   bean객체를 만드는거와
   
   
   
   @Resource( name = '' )
   	동일한 성질
   
   
   
   
   ****3 -24강  ----------------------------------------------------  
   AOP
   - Aspect Oriented Programming
   
  	하나의 프로그램을 관점(혹은 관심사)라는 논리적인 단위로 분리하여 관리하는 개념
  	로깅, 감사, 선언적 트랜젝션, 보안, 캐싱등 다양한 곳에 사용되고있다.
  	
  	메서드호출을 관심사로 설정하여 aop에 관한 실습을 진한다.
  	
  	관심사를 통해 Spring Framework가 어떤 메서드가 호출되는지 관심있게 지켜보다가
  	특정 메서드 호출되면 자공으로 메서드 전과 후에 다른 메서드가 호출 될 수 있도록한다.
   
   >> 메서드 호출을 관심사로 설정해놓으면 호출 전후 다른코드가  실행되는거
   
    - Joint Point 	모듈이 삽입되어 동작하게 되는 특정 위치( 메서드 호출 등 )	(관심사)
    - point Cut 	다양한 joint point 중에 어떤것을 사용할지 선택		(동작명령)
    - Advice 		join point에 삽입되어 동작할 수 있는 코드			(대상)
    - Weaving 		Advice를 핵심 로직코드에 적용하는것
    - Aspect : 		point cut + advice
    
    
    before			 : 메서드 호출전에 동작하는  advice
    after-returning  : 예외 없이 호출되는 메서드의 동작이 완료 되면 동작하는 advice
    after-throwing 	 : 호출된 메서드 동작 중 예외가 발생했을때 동작하는 advice
    after			 : 예외 발생 여부에 관계없이 호출된 메서드의 동작이 완료되면 동작하는 advice
    around			 : 메서드 호출 전과 후에 동작하는 advice
    
    
    
    ex)
    <aop:aspect ref='advisor1'>
		관심사를 설정하고 Weaving될 메소드 설정.
		ex)
		<aop:pointcut expression="execution(* method1())" id="point1"/>
								    ㄴ관심사 등록
	</aop:aspect>
	
	** method1이라는 실행되면 advisor1 <bean> >> <aop> >> pointcut-ref 순으로 이어진다.
   
	** 
	
	**
	public void aroundMethod(ProceedingJoinPoint pjp) throws Throwalbe{
			해당 메서드 호출 전과 후에 실행. 
	}
	
	afterReturningMethod은 정상작동시 호출됨
	afterThrowingMethod은 에러/예외시 호출됨
	
	** 결과1
	beforeMethod 호출
	 arroundMethod 호출1 
	  method1은 호출 --- 관심사 등록
	  afterReturningMethod 호출 		
	 arroundMethod 호출2 
 	afterMethod 호출



 ****3 -25강  ----------------------------------------------------  
Execution 명시자
  - 전 강의에서 관심사로 등록하는 부분.
  ex)"execution(* method1())" id="point1"
  				접근제한자 리턴타입 클래스 이름 메서드 이름(매개변수)
  expression="execution(void kr.co.campus.beans.TestBean1.method1()
  				
  	*  : 하나의 모든것을 의미.
  			(*)은 한개의 매개변수만 가능
  			(*,*)
  			(int, *) 앞에는 int 뒤에는 *
  			
  	.. : 개수 상관없이 모든것을 의미한다. (모든 타입의 매개변수 0개 이상)
  	
  	*(..)모든 메서드 의 개수 상관없이/.
  				
  - 접근제한잔 : public만 지원.
  - 리턴타입 : 메서드의 매개변수 타입
  - 클래스이름 : 패키지를 포함한 클래스이름
  - 메서드 이름 : 메서드의 이름
  - 매개변수 : 매개변수의 형태.

 aop작성
 		<aop:config>
 			<aop:aspect ref='A'>
 				<aop:pointcut id="B"/>
 				
 				<aop:before method="" pointcut-ref="B"/>
 			</aop:aspect>
 		</aop:config>
 		
 	**현 method1의 중요한거.
 	aop:pointcut의 어떻게 설정하는냐에 따라 Weaving 포인트(beforemethod) 호출이 다르다는 걸 알수 있다.
 	
 	
 	
 

 ****3 -26강  ----------------------------------------------------  
@AspectJ 
	어노테이션을 활용해 Advisor 역할을 할 Bean을 설정.
	3)
	xml설정시
	<aop:aspectj-autoproxy>
	
	
	@어노테이션
	@EnableAspectJAutoProxy


//1) @Component로 Bean으로 등록
//2) BeanConfigClass 등록 및 xml등록
		@ComponentScan(basePackages = {"kr.co.campus.beans" ,"kr.co.campus.advisor"})
		** {}를 열어 다중선택.
		
		xml
		<context:component-scan base-package="kr.co.campus.advisor"/>
//3)을 작성
//4) Advisor에서 @Aspect 작성.


	@Before 		- 관심사 동작 이전에 호출
	@After 			- 관심사 동작 이후에 호출
	@Around 		- 관심사 동작 이전 이후를 의미한다.
		ex)
		@Around("execution(* method1())")
		public Object aroundMethod(ProceedingJoinPoint pjp)throws Throwable {
			System.out.println("--aroundMethod 호출1");
			Object result = pjp.proceed();
			System.out.println("--aroundMethod 호출2");
			return result;
		}	
		
	@AfterReturning - 예외 없이 정상적으로 종료되었을 때 호출
	@AfterThrowing 	- 예외가 발생하여 종료 되었을때 호출.










































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  		
  		